[{"/Users/hegmana/personal/things-to-do/apps/frontend/src/index.tsx":"1","/Users/hegmana/personal/things-to-do/apps/frontend/src/reportWebVitals.ts":"2","/Users/hegmana/personal/things-to-do/apps/frontend/src/pages/Categories.tsx":"3","/Users/hegmana/personal/things-to-do/apps/frontend/src/components/CategoryItem.tsx":"4","/Users/hegmana/personal/things-to-do/apps/frontend/src/components/AppBar.tsx":"5","/Users/hegmana/personal/things-to-do/apps/frontend/src/pages/Category.tsx":"6","/Users/hegmana/personal/things-to-do/apps/frontend/src/pages/NotFound.tsx":"7","/Users/hegmana/personal/things-to-do/apps/frontend/src/store/categories.ts":"8","/Users/hegmana/personal/things-to-do/apps/frontend/src/graphql/index.ts":"9","/Users/hegmana/personal/things-to-do/apps/frontend/src/graphql/client.ts":"10","/Users/hegmana/personal/things-to-do/apps/frontend/src/store/index.ts":"11","/Users/hegmana/personal/things-to-do/apps/frontend/src/store/modals.ts":"12","/Users/hegmana/personal/things-to-do/apps/frontend/src/components/PageWrapper.tsx":"13","/Users/hegmana/personal/things-to-do/apps/frontend/src/components/LoadingModal.tsx":"14","/Users/hegmana/personal/things-to-do/apps/frontend/src/components/Thing.tsx":"15","/Users/hegmana/personal/things-to-do/apps/frontend/src/components/Tag.tsx":"16","/Users/hegmana/personal/things-to-do/apps/frontend/src/pages/CreateThing.tsx":"17","/Users/hegmana/personal/things-to-do/apps/frontend/src/utils.ts":"18","/Users/hegmana/personal/things-to-do/apps/frontend/src/store/tags.ts":"19"},{"size":4410,"mtime":1663618805119,"results":"20","hashOfConfig":"21"},{"size":425,"mtime":1661884119949,"results":"22","hashOfConfig":"21"},{"size":886,"mtime":1663610998950,"results":"23","hashOfConfig":"21"},{"size":1197,"mtime":1662742697576,"results":"24","hashOfConfig":"21"},{"size":1290,"mtime":1662749675308,"results":"25","hashOfConfig":"21"},{"size":5520,"mtime":1663617892453,"results":"26","hashOfConfig":"21"},{"size":201,"mtime":1662495284699,"results":"27","hashOfConfig":"21"},{"size":593,"mtime":1663610923337,"results":"28","hashOfConfig":"21"},{"size":26,"mtime":1662506774744,"results":"29","hashOfConfig":"21"},{"size":171,"mtime":1662506770335,"results":"30","hashOfConfig":"21"},{"size":400,"mtime":1663614422929,"results":"31","hashOfConfig":"21"},{"size":1143,"mtime":1662559462757,"results":"32","hashOfConfig":"21"},{"size":313,"mtime":1662558218728,"results":"33","hashOfConfig":"21"},{"size":648,"mtime":1662559018890,"results":"34","hashOfConfig":"21"},{"size":1257,"mtime":1663347828044,"results":"35","hashOfConfig":"21"},{"size":2247,"mtime":1663339705802,"results":"36","hashOfConfig":"21"},{"size":3918,"mtime":1663622543330,"results":"37","hashOfConfig":"21"},{"size":121,"mtime":1663336283901,"results":"38","hashOfConfig":"21"},{"size":322,"mtime":1663247719581,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1w1gkh2",{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"/Users/hegmana/personal/things-to-do/apps/frontend/src/index.tsx",[],"/Users/hegmana/personal/things-to-do/apps/frontend/src/reportWebVitals.ts",[],[],"/Users/hegmana/personal/things-to-do/apps/frontend/src/pages/Categories.tsx",[],"/Users/hegmana/personal/things-to-do/apps/frontend/src/components/CategoryItem.tsx",[],"/Users/hegmana/personal/things-to-do/apps/frontend/src/components/AppBar.tsx",[],"/Users/hegmana/personal/things-to-do/apps/frontend/src/pages/Category.tsx",["80","81"],"import { Divider, Drawer, Fab, List, ListItem, ListItemButton, ListItemText, styled, TextField, Typography } from \"@mui/material\";\nimport { Tag as TagType, Thing as ThingType, useGetCategoryLazyQuery } from \"@ttd/graphql\";\nimport React from \"react\";\nimport { useNavigate, useParams } from \"react-router\";\nimport { useStore } from \"../store\";\nimport { AppBar } from \"../components/AppBar\";\nimport { Thing } from \"../components/Thing\";\nimport { Modal } from \"../store/modals\";\nimport { PageWrapper } from \"../components/PageWrapper\";\nimport { Tag } from \"../components/Tag\";\nimport { Add, Search } from \"@mui/icons-material\";\n\ninterface ICategoryProps {\n  loading: boolean;\n}\n\nexport const CategoryPage: React.FC<ICategoryProps> = (props) => {\n  const { loading } = props;\n  const { categoryId } = useParams();\n  const { categories, openModal, currentCategory, setCurrentCategory, closeModal, tags } = useStore();\n\n  const [searchText, setSearchText] = React.useState(\"\");\n  const [selectedTags, setSelectedTags] = React.useState<TagType[]>([]);\n  const [searchBoxFocused, setSearchBoxFocused] = React.useState(false);\n  const [showMoreDrawer, setShowMoreDrawer] = React.useState(false);\n\n  const navigate = useNavigate();\n\n  const searchBoxRef = React.useRef<HTMLDivElement>(null);\n  const selectedThingRef = React.useRef<string>();\n\n  const categoryTags = React.useMemo(\n    () => (!tags || !currentCategory ? [] : tags.filter((tag) => currentCategory?.id === tag.id)),\n    [tags, currentCategory]\n  );\n\n  React.useEffect(() => {\n    if (loading) {\n      openModal(Modal.Loading);\n    } else {\n      closeModal(Modal.Loading);\n    }\n  }, [loading]);\n\n  React.useEffect(() => {\n    if (categories && !loading) {\n      const _currentCategory = categories.find((category) => category.id === categoryId);\n      if (!_currentCategory) {\n        navigate(\"/error/not-found\");\n      } else {\n        setCurrentCategory(_currentCategory);\n      }\n    }\n  }, [categories, categoryId, loading]);\n\n  const getSelectableTags = () => {\n    return categoryTags.filter((tag) => selectedTags.findIndex((selectedTag) => selectedTag.id === tag.id) < 0) || [];\n  };\n\n  const onTagClick = (tag: TagType) => {\n    setSelectedTags([...selectedTags, tag]);\n    setSearchText(\"\");\n  };\n\n  const getFilteredThings = (): ThingType[] => {\n    return selectedTags.length > 0\n      ? currentCategory?.things.filter((thing) =>\n          selectedTags.every((selectedTag) => thing.tags.findIndex((tag) => tag.id === selectedTag.id) >= 0)\n        ) || []\n      : currentCategory?.things || [];\n  };\n\n  const removeSelectedTag = (tag: TagType) => {\n    const tagIdx = selectedTags.findIndex((_tag) => _tag.id === tag.id);\n\n    setSelectedTags([...selectedTags.slice(0, tagIdx), ...selectedTags.slice(tagIdx! + 1)]);\n  };\n\n  const onClickMore = (thingId: string) => {\n    selectedThingRef.current = thingId;\n    setShowMoreDrawer(true);\n  };\n\n  return (\n    <PageWrapper>\n      <AppBar\n        onLeftLinkClick={() => (searchBoxFocused ? setSearchBoxFocused(false) : navigate(\"/\"))}\n        leftLinkTitle=\"Back\"\n        onRightLinkClick={searchBoxFocused ? () => setSearchBoxFocused(false) : undefined}\n        rightLinkTitle=\"Done\"\n        title={currentCategory?.name}\n      />\n      <div style={{ display: \"flex\", flexDirection: \"column\", marginLeft: \"10px\" }}>\n        <TextField\n          variant=\"outlined\"\n          size=\"small\"\n          sx={{ margin: \"0 10px 15px 0\", borderRadius: \"15px\" }}\n          value={searchText}\n          onChange={(e) => setSearchText(e.target.value)}\n          onFocus={() => setSearchBoxFocused(true)}\n          InputProps={{\n            startAdornment: (\n              <>\n                <Search sx={{ color: \"primary.main\" }} />\n                {selectedTags.map((tag) => (\n                  <Tag key={tag.id} tag={tag} sx={{ color: \"primary.main\" }} onClose={removeSelectedTag} />\n                ))}\n              </>\n            ),\n          }}\n          ref={searchBoxRef}\n        />\n\n        {!searchBoxFocused &&\n          getFilteredThings().map((thing, idx) => (\n            <div key={thing.id} style={{ marginBottom: \"10px\" }}>\n              <Thing thing={thing} onClickMore={() => onClickMore(thing.id)} />\n              {currentCategory?.things.length! > 1 && idx < currentCategory?.things!.length! - 1 ? (\n                <Divider sx={{ marginRight: \"20px\" }} />\n              ) : null}\n            </div>\n          ))}\n\n        {searchBoxFocused &&\n          getSelectableTags()\n            .filter((tag) => tag.name.toLowerCase().includes(searchText.toLowerCase()))\n            .map((tag, idx) => (\n              <div key={tag.name} style={{ marginBottom: \"10px\" }} onClick={() => onTagClick(tag)}>\n                <Typography>{tag.name}</Typography>\n                {categoryTags.length > 1 && idx < categoryTags.length - 1 ? <Divider sx={{ marginRight: \"20px\" }} /> : null}\n              </div>\n            ))}\n      </div>\n      <Drawer open={showMoreDrawer} anchor={\"bottom\"} onClose={() => setShowMoreDrawer(false)}>\n        <List>\n          {[\"Edit\", \"Delete\"].map((text, index) => (\n            <ListItem key={text} disablePadding>\n              <ListItemButton>\n                <ListItemText primary={text} />\n              </ListItemButton>\n            </ListItem>\n          ))}\n        </List>\n      </Drawer>\n      <Fab color=\"secondary\" sx={{ position: \"absolute\", right: \"10px\", bottom: \"10px\" }} onClick={() => navigate(\"create\")}>\n        <Add />\n      </Fab>\n    </PageWrapper>\n  );\n};\n","/Users/hegmana/personal/things-to-do/apps/frontend/src/pages/NotFound.tsx",[],"/Users/hegmana/personal/things-to-do/apps/frontend/src/store/categories.ts",[],"/Users/hegmana/personal/things-to-do/apps/frontend/src/graphql/index.ts",[],"/Users/hegmana/personal/things-to-do/apps/frontend/src/graphql/client.ts",[],"/Users/hegmana/personal/things-to-do/apps/frontend/src/store/index.ts",[],"/Users/hegmana/personal/things-to-do/apps/frontend/src/store/modals.ts",[],"/Users/hegmana/personal/things-to-do/apps/frontend/src/components/PageWrapper.tsx",[],"/Users/hegmana/personal/things-to-do/apps/frontend/src/components/LoadingModal.tsx",[],"/Users/hegmana/personal/things-to-do/apps/frontend/src/components/Thing.tsx",[],"/Users/hegmana/personal/things-to-do/apps/frontend/src/components/Tag.tsx",[],"/Users/hegmana/personal/things-to-do/apps/frontend/src/pages/CreateThing.tsx",["82"],"/Users/hegmana/personal/things-to-do/apps/frontend/src/utils.ts",[],"/Users/hegmana/personal/things-to-do/apps/frontend/src/store/tags.ts",[],{"ruleId":"83","severity":1,"message":"84","line":43,"column":6,"nodeType":"85","endLine":43,"endColumn":15,"suggestions":"86"},{"ruleId":"83","severity":1,"message":"87","line":54,"column":6,"nodeType":"85","endLine":54,"endColumn":39,"suggestions":"88"},{"ruleId":"83","severity":1,"message":"89","line":43,"column":6,"nodeType":"85","endLine":43,"endColumn":85,"suggestions":"90"},"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'closeModal' and 'openModal'. Either include them or remove the dependency array.","ArrayExpression",["91"],"React Hook React.useEffect has missing dependencies: 'navigate' and 'setCurrentCategory'. Either include them or remove the dependency array.",["92"],"React Hook React.useEffect has missing dependencies: 'selectedTags' and 'tags'. Either include them or remove the dependency array. You can also do a functional update 'setSelectedTags(s => ...)' if you only need 'selectedTags' in the 'setSelectedTags' call.",["93"],{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},"Update the dependencies array to be: [closeModal, loading, openModal]",{"range":"100","text":"101"},"Update the dependencies array to be: [categories, categoryId, loading, navigate, setCurrentCategory]",{"range":"102","text":"103"},"Update the dependencies array to be: [loading, openModal, closeModal, setTags, setSelectedTags, called, data, reset, tags, selectedTags]",{"range":"104","text":"105"},[1638,1647],"[closeModal, loading, openModal]",[1950,1983],"[categories, categoryId, loading, navigate, setCurrentCategory]",[1580,1659],"[loading, openModal, closeModal, setTags, setSelectedTags, called, data, reset, tags, selectedTags]"]